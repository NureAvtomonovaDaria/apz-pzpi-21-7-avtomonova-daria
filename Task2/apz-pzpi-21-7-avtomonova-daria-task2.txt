1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

Серед користувачів програмної системи є 3 типи акторів: звичайний відвідувач тренувальних залів (далі відвідувач), адміністратор та тренер. 
Взаємодія акторів та системи представлена на діаграмі прецедентів (див. рис. 1).
За діаграмою прецедентів було визначено функціональні вимоги та спосіб взаємодії акторів та програмної системи.

2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ

З метою проектування бази даних була створена ER-модель даних (див. рис. 2), що складається з 8 таблиць: користувачі (User), тренажерний зали (Gym), мережі тренажерних залів (Company), покупки абонементів(Purchase), відвідування тренажерних залів(Visit), абонементи (Subscription), тренажери (Trainer) та QR-code (QrCode).
Виникли наступні зв’язки між сутностями при проектуванні бази даних:
1. Користувач – Мережа тренажерних залів (один до одного, один користувач може володіти тільки однією мережею тренажерних залів)
2. Користувач – Відвідування (один до багатьох, один користувач може мати декілька відвідувань)
3. Користувач – Покупка (один до багатьох, один користувач може мати декілька покупок абонементів)
4. Користувач – QR-код (один до багатьох, один користувач може мати декілька QR-кодів)
5. Мережа тренажерних залів – Тренажерний зал (один до багатьох, в одній мережі може бути декілька тренажерних залів)
6. Тренажерний зал – Абонемент (один до багатьох, у одного тренажерного залу може бути декілька абонементів)
7. Абонемент – QR-код (один до багатьох, один абонемент може мати декілька QR-кодів)
8. Тренажерний зал – тренажер (один до багатьох, один зал може мати декілька тренажерів)
 
3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Створення серверної частини було реалізовано на Node.js з використанням фреймворку Express.js
Як базу даних було обрано MongoDB, доступ до якої реалізований за допомогою бібліотеки Mongoose, що надає інструменти для валідації, побудови схем даних тощо.
З метою візуалізації використаних технологій було побудовано діаграму розгортання (див. рис. 3).
 
4 СПЕЦИФІКАЦІЯ REST

Програмна система використовує REST API, що складається з 29 ендпоінтів, кожен з яких надає певну інформація, як користувачу, так і адміністратору, та виконує бізнес логіку. Специфікація REST API наведена у таблиці 1.
Таблиця 1 – Специфікація REST API
Посилання на ендпоінт              Метод HTTP    Необхідна роль    Опис роботи
----------------------------------------------------------------------------------------------------------
/register                          POST          -                 Реєстрація користувача
/login                             POST          -                 Авторизація користувача
/user/:id                          GET           user              Отримання даних профілю авторизованого користувача
/user/:id                          PUT           user              Редагування даних профілю користувача
/user/:id                          DELETE        user              Видалення профілю користувача
/user/:userId/addCard              POST          user              Додання картки користувача для оплати
/user/:id/change-password          PUT           user              Зміна паролю користувача
/user/sub                          POST          user              Придбання абонементу авторизованим користувачем
/visits/company/:companyId         GET           admin             Отримання усіх відвідувань тренажерних залів певної мережі
/trainers                          GET           -                 Отримання усіх тренажерів доданих до БД
/trainer                           POST          admin             Додання нового тренажеру
/sub/:id                           GET           -                 Отримання певного абонементу
/sub/:gymId                        POST          admin             Створення нового абонементу для певного залу
/sub/:id                           PUT           admin             Редагування певного абонементу
/sub/:id                           DELETE        admin             Видалення певного абонементу
/purchase/:id                      GET           user              Отримання певної покупки
/purchase                          POST          user              Створення нової покупки
/gym/:id                           GET           -                 Отримання певного тренажерного залу
/gym                               POST          admin             Створення нового тренажерного залу
/gym/:id                           PUT           admin             Редагування тренажерного залу
/gym/:id                           DELETE        admin             Видалення тренажерного залу
/companies                         GET           -                 Отримання усіх створених мереж тренажерних залів
/company/:id/gyms                  GET           -                 Отримання усіх залів певної компанії
/company/:id/gym                   POST          admin             Додання залу до певної мережі залів
/company/:userId                   POST          admin             Створення мережі залів адмінстратором
/company/:id                       PUT           admin             Редагування мережі залів
/export-purchase-history/:userId   GET           user              Експорт даних про історію покупок користувача
/subs-info/:userId/export          GET           user              Експорт даних про придбані абонементи користувача
/scanQRCode                        POST          user              Сканування QR-code для відвідування залу
У такий спосіб було визначено основні ендпоінти для HTTP запитів до серверної частини застосунку.
 
ВИСНОВКИ

Під час виконання лабораторної роботи були отримані навички з проектування та створення серверної частини програмної системи, розробки діаграм та проектування бази даних. Була розроблена програмна реалізація серверної частини програмної системи. Під час розробки продукту дотримувались вимоги до чистого коду та Code Convention мови програмування Javascript.
