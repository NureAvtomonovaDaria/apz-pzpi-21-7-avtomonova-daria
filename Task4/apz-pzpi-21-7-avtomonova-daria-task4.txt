1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

Серед користувачів програмної системи є 3 типи акторів: звичайний відвідувач тренувальних залів (далі відвідувач), адміністратор та тренер. 
Взаємодія акторів та системи представлена на діаграмі прецедентів (див. рис. 1).
За діаграмою прецедентів було визначено функціональні вимоги та спосіб взаємодії акторів та програмної системи.
Звичайний користувач, тобто відвідувач тренажерних залів може входити до системи, переглядати усі доступні мережі тренажерних залів, мати свій профіль та можливість його редагувати і видаляти, може придбати абонемент та отримати QR-code.
Адміністратор може створювати свою мережу залів, редагувати її, додавати нові тренажерні зали та редагувати старі, додавати тренерів та абонементи, редагувати їх, а також експортувати дані про свою мережу тренажерних залів.
Тренер може входити до системи, переглядати усі доступні мережі тренажерних залів, мати свій профіль та можливість його редагувати і видаляти.
 
2 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

З метою проектування клієнтської частини була розроблена UML діаграма компонентів (див. рис. 2), що демонструє архітектуру системи та взаємодію її компонентів.
Були виділені наступні компоненти:
‒	Subscriptions – Відображення доступних абонементів залу для покупки;
‒	Gyms – Відображення усіх тренажерних залів певної мережі;
‒	QR-code – Відображення QR-code для кожного придбаного абонементу користувача;
‒	ExportSubsInfo – Експорт даних про придбані користувачем підписки;
‒	Visits – Відображення усіх даних про відвідування користувача та оновлення даних про відвідування, шляхом сканування QR-code на вході до залу;
‒	Company – Відображення даних про мережу тренажерних залів та можливість їх редагувати;
‒	ExportCompanyInfo – Експорт даних про компанію. 
 
3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Було виділено пакети, які складають структуру програмної системи, шляхом створення Діаграми пакетів (рис. 3).
Основний прошарок пакетів рішення включає такі пакети, як пакет вихідного коду (src), пакет компонентів (components), пакет статичних файлів (assets), пакети зі стилями (styles), пакет зі статичними файлам та точкою входу в систему (public).
 
4 ПОБУДОВА ДІАГРАМИ СТАНІВ

Основні функції та інтерфейси, які надає клієнтська частина, були виділені шляхом створення UML діаграми станів (рис. 4). 
Отримано діаграму станів, що показує поведінку клієнтської частини, що залежить від її поточного стану.
 
5 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ

Для розробки клієнтської частини програмної системи було обрано React.js, що використовує мову програмування Javascript.
Клієнтська частина надає графічний інтерфейс для відображення створеної бізнес логіки. 
‒	Відображення доступних мереж тренувальних залів, можливість їх редагування адміністратором, можливість додавати до мережі зали, редагувати їх та видаляти, також є можливість додавати до мережі абонементи, редагувати їх та видаляти.
‒	Відображення профілю користувача, можливість редагувати його, переглядати історію покупок, відвідування користувачем залів, а також експортувати дані про покупку та куплені абонементи.
‒	Експортування даних мережі тренажерних залів. Адміністратору на комп’ютер буде завантажено дані у вигляді excel файлу.
‒	Можливість просканувати QR-code користувача та отримати інформацію про нього та його абонемент та оновити його відвідування.
Відповідно до вимог захисту даних, паролі користувачів не відображаються при перегляді інформації користувачів. Паролі також хешуються, щоб сховати їх для відображення у базі даних. Також при авторизації кожному користувачу генерується його унікальний токен для кожної сесії, що реалізовано за допомогою jwt.
 
ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проектування клієнтської частини програмної системи. Була розроблена реалізація клієнтської частини. При розробці застосунку дотримувались вимоги чистого коду та Code Convention мови програмування Javascript та бібліотеки React.js. Було розроблено діаграми станів, діаграми пакетів та діаграми компонентів.
